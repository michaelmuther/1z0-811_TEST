import java.util.ArrayList;
import java.util.List;

public class ArrayList3 {
    int id;
    public ArrayList3(int id){
        this.id = id;
    }

    public static void main(String[] args) {
        List<ArrayList3> list = new ArrayList<ArrayList3>();
        list.add(new ArrayList3(111));
        list.add(new ArrayList3(222));

        //insert code here
//        for(int id : list.id) System.out.print(id+" "); // not this
/*
This will not compile because list does not have a field named id.

Note that a foreach loop requires an object of a class that implements java.lang.Iterable interface.
It is possible to iterate over the elements of a List and ArrayList because they do implement Iterable.
 */

//        for(ArrayList3 id : list) System.out.print(id+" "); //prints the reference, not the id
/*
The loop variable id refers to an object of type Account. So, this will print the String generated by the toString method inherited from the Object class by the Account class. Something like:
Account@5e2de80c Account@1d44bcfa

It should be:
for(Account id : list) System.out.print(id.id+" ");

Of course, the loop variable is inappropriately named, which causes the confusion. It should ideally be named as acct.
 */

//        Iterator<ArrayList3> it = list.iterator();
//        while(it.hasNext()) System.out.println(it.next()+" "); // println: wrong.  prints reference again
/*
This is a valid loop but it.next() will return an Account object, whereas, you want the id field of an Account object to be printed.
This will print the String generated by the toString method inherited from the Object class by the Account class. Something like:
Account@5e2de80c Account@1d44bcfa
 */
//        for(int i = 0; i<list.size(); i++) System.out.print(list.id+" ");
/*
The list variable points to an ArrayList object and not to an Account object. So, list.id is invalid and will not compile.
It should be:
for(int i = 0; i<list.size(); i++) System.out.print(list.get(i).id+" ");
 */
    }
}